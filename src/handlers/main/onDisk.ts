import { Markup } from "telegraf";
import { getDiskPathByPath } from "../../db/diskPath";
import { disk } from "../../disk/disk";
import { cachePaths } from "../../helpers/cachePaths";
import { MyContextWithMatch } from "../../types";

const PROJECTS_IN_MESSAGE = 20;

export async function onDisk(ctx: MyContextWithMatch) {
  const type = ctx.match[1];
  ctx.answerCbQuery();
  let path = "";
  if (type === "d") path = "/–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã";
  if (type === "c") path = "/–¢–µ–∫—É—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã";
  try {
    const folders = (await disk.resources.get(path))._embedded.items;

    if (folders.length === 0) return ctx.reply("–í –ø–∞–ø–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤");
    await cachePaths(folders);

    const buttons = await Promise.all(
      folders.map(async (item) => {
        const { id: pathId } = await getDiskPathByPath(item.path);
        return Markup.button.callback(item.name, `pr-${pathId}`);
      })
    );

    let i = 0;
    await ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å üëá –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ development.alabuga.ru üìÑ"
    );
    while (buttons.length > 0) {
      const part = buttons.splice(0, PROJECTS_IN_MESSAGE);
      const partsByPairs = [];
      while (part.length > 0) {
        partsByPairs.push(part.splice(0, 2));
      }
      await ctx.reply(
        "–ü—Ä–æ–µ–∫—Ç—ã —Å " + (i + 1) + " –ø–æ " + (i + PROJECTS_IN_MESSAGE) + ":",
        Markup.inlineKeyboard(partsByPairs)
      );
      i += PROJECTS_IN_MESSAGE;
    }
  } catch (error) {
    ctx.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫");
    console.error(error);
  }
}
